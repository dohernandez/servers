// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

option go_package = "github.com/consensys-vertical-apps/platform-data-pipeline-toolkit/server/testdata";

package helloworld;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Greeter"
    version: "1.0"
    description: "The Greeter's API"
  }
  schemes: HTTP;
  consumes: "application/json"
  produces: "application/json"
  responses: {
    key: "400"
    value: {
      description: "Provided invalid argument.";
      schema: {
        json_schema: {
          ref: ".google.rpc.Status"
        }
      }
    }
  }
  responses: {
    key: "500"
    value: {
      description: "Internal error."
      schema: {
        json_schema: {
          ref: ".google.rpc.Status"
        }
      }
    }
  }
};

// The greeting service definition.
service Greeter {
  // Sends a greeting
  rpc SayHello(HelloRequest) returns (HelloReply) {
    // Client example (Assuming the service is hosted at the given 'DOMAIN_NAME'):
    // Client example:
    //   curl -d '{"name": "Joe"}' http://DOMAIN_NAME/say/Joe
    option (google.api.http) = {
      get: "/say/{name}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "200"
        value: {
          description: "A successful response"
          examples: {
            key: "application/json"
            value: '{"message": "Hello Joe"}'
          }
          schema: {
            json_schema: {
              ref: ".helloworld.HelloReply"
            }
          }
        }
      }
    };
  }
}

// The request message containing the user's name.
message HelloRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "HelloRequest"
      description: "Request message hello name."
      required: ["name"]
    }
  };
  // The name.
  string name = 1 [json_name = "name"];
}

// The response message containing the greetings
message HelloReply {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "HelloReply"
      description: "Response message hello."
    }
  };
  // The greeting message.
  string message = 1;
}
